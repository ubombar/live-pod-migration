/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ubombar/live-pod-migration/pkg/apis/livepodmigration/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LivePodMigrationLister helps list LivePodMigrations.
// All objects returned here must be treated as read-only.
type LivePodMigrationLister interface {
	// List lists all LivePodMigrations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LivePodMigration, err error)
	// LivePodMigrations returns an object that can list and get LivePodMigrations.
	LivePodMigrations(namespace string) LivePodMigrationNamespaceLister
	LivePodMigrationListerExpansion
}

// livePodMigrationLister implements the LivePodMigrationLister interface.
type livePodMigrationLister struct {
	indexer cache.Indexer
}

// NewLivePodMigrationLister returns a new LivePodMigrationLister.
func NewLivePodMigrationLister(indexer cache.Indexer) LivePodMigrationLister {
	return &livePodMigrationLister{indexer: indexer}
}

// List lists all LivePodMigrations in the indexer.
func (s *livePodMigrationLister) List(selector labels.Selector) (ret []*v1alpha1.LivePodMigration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LivePodMigration))
	})
	return ret, err
}

// LivePodMigrations returns an object that can list and get LivePodMigrations.
func (s *livePodMigrationLister) LivePodMigrations(namespace string) LivePodMigrationNamespaceLister {
	return livePodMigrationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LivePodMigrationNamespaceLister helps list and get LivePodMigrations.
// All objects returned here must be treated as read-only.
type LivePodMigrationNamespaceLister interface {
	// List lists all LivePodMigrations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LivePodMigration, err error)
	// Get retrieves the LivePodMigration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LivePodMigration, error)
	LivePodMigrationNamespaceListerExpansion
}

// livePodMigrationNamespaceLister implements the LivePodMigrationNamespaceLister
// interface.
type livePodMigrationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LivePodMigrations in the indexer for a given namespace.
func (s livePodMigrationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LivePodMigration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LivePodMigration))
	})
	return ret, err
}

// Get retrieves the LivePodMigration from the indexer for a given namespace and name.
func (s livePodMigrationNamespaceLister) Get(name string) (*v1alpha1.LivePodMigration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("livepodmigration"), name)
	}
	return obj.(*v1alpha1.LivePodMigration), nil
}
