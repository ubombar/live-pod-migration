syntax = "proto3";

option go_package = ".";


service MigratorService {
    rpc CreateJob (CreateJobRequest) returns (CreateJobResponse);

    rpc ListJobs (ListJobsRequest) returns (ListJobsResponse);

    rpc UpdateStage (UpdateStageRequest) returns (UpdateStageResponse);
}

enum MigrationState {
    // Container runs on source host
    pending         = 0;
    preparing       = 1;

    // Container runs on no host
    checkpointing   = 2;
    transfering     = 3;
    restoring       = 4;

    // Container runs on destination host
    cleaning        = 5;

    // Done states
    succeded        = 6;
    failed          = 7;
}

enum MigrationMethod {
    cold_migration = 0;
}

enum MigrationRole {
    source = 0;
    destination = 1;
    controller = 3;
}

message IPAddress {
    string address = 1;
    int32 port = 2;
}

message CreateJobRequest {
    // Addresses of the source and destination
    IPAddress source = 1;
    IPAddress destination = 2;
    
    // Either specify the container name or container id
    oneof container {
        string name = 3;
        string id = 4;
    }
    
    // User's of the hosts
    string source_user = 5;
    string destination_user = 6;

    // Method of migration, Cold, Lazy, Iterative.
    MigrationMethod migration_method = 7;

    // The side who sent the creation request. Controller
    // or source host.
    MigrationRole requested_by = 8;
    
    // Requested migration id
    string migration_id = 9;
}

message CreateJobResponse {
    optional string error_string = 1;
}

message Job {
    // Migration id
    string migration_id = 1;

    // Addresses of source and destination hosts.
    IPAddress source = 2;
    IPAddress destination = 3;

    // Method used for the migration
    MigrationMethod migration_method = 4;

    // Migration stage
    string migration_stage = 7;

    // Error string if there exists any errors
    optional string error_string = 8;

    // Is the container running on any of the hosts
    bool offline = 9;

    // Creation date of the migration
    string creation_date = 10;

    // Role of the host on the migration
    MigrationRole role = 11;
}

message ListJobsRequest {
    
}

message ListJobsResponse {
    repeated Job jobs = 1;
    optional string error_string = 2;
}

message UpdateStageRequest {
    // Migration id
    string migration_id = 1;
    
    // State finished and next
    MigrationState state_finished = 2;
    MigrationState state_next = 3;

    // If the container is offline on the host
    bool offline = 4;

    optional string error_string = 5;
}

message UpdateStageResponse {
    
}