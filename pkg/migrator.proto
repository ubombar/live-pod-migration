syntax = "proto3";

option go_package = ".";

service MigratorService {
    // Tells any migratord to get in client role.
    rpc CreateMigrationJob (CreateMigrationJobRequest) returns (CreateMigrationJobResponse);

    // Migratord with client role invokes it's peer. If works it's peer gets in a server role.
    rpc ShareMigrationJob (ShareMigrationJobRequest) returns (ShareMigrationJobResponse);

    // Updates the status of the migration, invoked in server.
    rpc UpdateMigrationStatus (UpdateMigrationStatusRequest) returns (UpdateMigrationStatusResponse);

    // Stream the checkpoint file
    rpc SendViaSCP (SendViaSCPRequest) returns (SendViaSCPResponse);
}

enum MigrationMethod {
    Basic = 0;
    Precopy = 1;
    Postcopy = 2;
}

message CreateMigrationJobRequest {
    string peer_address = 1;
    int32 peer_port = 2;
    string container_id = 3;
    MigrationMethod method = 4;
}

message CreateMigrationJobResponse {
    string migration_id = 1;
    bool accepted = 2;
    int64 creaton_unix_time = 3;
}

message ShareMigrationJobRequest {
    string peer_address = 1;
    int32 peer_port = 2;
    string container_id = 3;
    string container_image = 4;
    string container_name = 5;
    MigrationMethod method = 6;
}

message ShareMigrationJobResponse {
    string migration_id = 1;
    bool accepted = 2;
    int64 creaton_unix_time = 3;
}

message UpdateMigrationStatusRequest {
    string migration_id = 1;    
    string new_status = 2;
    optional string description = 3;
}

message UpdateMigrationStatusResponse {}

message SendViaSCPRequest {
    string sftp_certificate = 1;
    int64 file_size = 2;
}

message SendViaSCPResponse {
    
}