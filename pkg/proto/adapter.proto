syntax = "proto3";
package adapter;

option go_package = "./migrator/v1alpha1";

service Migrator {
    // Preflight check initiates the migration, exchange information. Both sides check if everything is in order
    // before the migration
    rpc PreflightCheck (PreflightCheckRequest) returns (PreflightCheckResponse);

    // Gets the pod and container info.
    rpc PodInfo (PodInfoRequest) returns (PodInfoResponse);

    // Client transmits the container file as small fragments.
    rpc StreamContainer (stream StreamContainerRequest) returns (StreamContainerResponse);

}  

enum MigratorVersion {
    V1ALPHA1 = 0;
}

enum ContainerRuntime {
    // Currently we only support docker runtime.
    DOCKER = 0;
}

message PreflightCheckRequest {
    string client_name      = 1;
    MigratorVersion version = 2;
}

message PreflightCheckResponse {
    string server_name      = 1;
    MigratorVersion version = 2;
}

message PodInfoRequest {
    message ContainerInfo {
        string container_name  = 1;
        string container_id    = 2;
        string checkpoint_file = 3;
        string checkpoint_date = 4;
    }
    string pod_name = 1;
    repeated ContainerInfo containers = 2;
}

message PodInfoResponse {
    
}

message StreamContainerRequest {
    
}

message StreamContainerResponse {
    
}