syntax = "proto3";
package adapter;

option go_package = "./migrator/v1alpha1";

service Migrator {
    rpc InitiateMigration (InitiateMigrationRequest) returns (InitiateMigrationResponse);

    // Send the checkpoint file by file. In the future this can also serve memory pages.
    rpc TransitCheckpointInformation (TransitCheckpointInformationRequest) returns (TransitCheckpointInformationResponse);

    // Used for transforming checkpoints
    rpc TransotCheckpointFragment (stream TransotCheckpointFragmentRequest) returns (stream TransotCheckpointFragmentResponse);

    // This is for exchanging status information.
    rpc ExchangeStatus (ExchangestatusRequest) returns (ExchangeStatusResponse);

    // Gets ok or error from the peer
    rpc ShouldClose (ShouldCloseRequest) returns (stream ShouldCloseResponse);
}  

message InitiateMigrationRequest {
    string pod_name = 1;
    string pod_namespace = 2;
    repeated string containers = 3;
}

message InitiateMigrationResponse {
    
}

message TransitCheckpointInformationRequest {
    
}

message TransitCheckpointInformationResponse {
    
}

message TransotCheckpointFragmentRequest {
    int64 checkpoint_index = 1;
    int64 fragment_index = 2;
    bytes payload = 3;
}

message TransotCheckpointFragmentResponse {
    int64 checkpoint_index = 1;
    int64 fragment_index = 2;
}

message ExchangestatusRequest {
 string status = 1;   
}

message ExchangeStatusResponse {
 string status = 1;   
}

message ShouldCloseRequest {

}

message ShouldCloseResponse {
    
}